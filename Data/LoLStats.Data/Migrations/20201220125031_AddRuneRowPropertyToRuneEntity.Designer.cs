// <auto-generated />
using System;
using LoLStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LoLStats.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201220125031_AddRuneRowPropertyToRuneEntity")]
    partial class AddRuneRowPropertyToRuneEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("BaseAbilityChampionAbilities", b =>
                {
                    b.Property<string>("AbilitiesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChampionAbilitiesId")
                        .HasColumnType("int");

                    b.HasKey("AbilitiesId", "ChampionAbilitiesId");

                    b.HasIndex("ChampionAbilitiesId");

                    b.ToTable("BaseAbilityChampionAbilities");
                });

            modelBuilder.Entity("ChampionItemsItem", b =>
                {
                    b.Property<int>("ChampionItemsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.HasKey("ChampionItemsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("ChampionItemsItem");
                });

            modelBuilder.Entity("ChampionRunesRune", b =>
                {
                    b.Property<int>("ChampionRunesId")
                        .HasColumnType("int");

                    b.Property<int>("RunesId")
                        .HasColumnType("int");

                    b.HasKey("ChampionRunesId", "RunesId");

                    b.HasIndex("RunesId");

                    b.ToTable("ChampionRunesRune");
                });

            modelBuilder.Entity("ChampionRunesStatRune", b =>
                {
                    b.Property<int>("ChampionRunesId")
                        .HasColumnType("int");

                    b.Property<int>("StatRunesId")
                        .HasColumnType("int");

                    b.HasKey("ChampionRunesId", "StatRunesId");

                    b.HasIndex("StatRunesId");

                    b.ToTable("ChampionRunesStatRune");
                });

            modelBuilder.Entity("ChampionStarterItemsItem", b =>
                {
                    b.Property<int>("ChampionStarterItemsId")
                        .HasColumnType("int");

                    b.Property<int>("ItemsId")
                        .HasColumnType("int");

                    b.HasKey("ChampionStarterItemsId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("ChampionStarterItemsItem");
                });

            modelBuilder.Entity("ChampionSummonerSpellsSummonerSpell", b =>
                {
                    b.Property<int>("ChampionSummonerSpellsId")
                        .HasColumnType("int");

                    b.Property<int>("SummonerSpellsId")
                        .HasColumnType("int");

                    b.HasKey("ChampionSummonerSpellsId", "SummonerSpellsId");

                    b.HasIndex("SummonerSpellsId");

                    b.ToTable("ChampionSummonerSpellsSummonerSpell");
                });

            modelBuilder.Entity("ChampionTag", b =>
                {
                    b.Property<string>("ChampionsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ChampionsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ChampionTag");
                });

            modelBuilder.Entity("LoLStats.Data.Models.AbilityPerLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AbilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BaseChampionAbilityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Cooldown")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<bool>("CostsPerSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("Level")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Range")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("AbilitiesPerLevel");
                });

            modelBuilder.Entity("LoLStats.Data.Models.AllyTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("AllyTips");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LoLStats.Data.Models.BaseAbility", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AbilityType")
                        .HasColumnType("int");

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("MaxRank")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("BaseAbilities");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Champion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InfoId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Lore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Partype")
                        .HasColumnType("int");

                    b.Property<int>("PassiveId")
                        .HasColumnType("int");

                    b.Property<int>("StatsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InfoId")
                        .IsUnique();

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PassiveId")
                        .IsUnique();

                    b.HasIndex("StatsId")
                        .IsUnique();

                    b.ToTable("Champions");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionAbilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<double>("WinRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsAbilities");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionAbilitiesAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BaseAbilityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ChampionAbilitiesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BaseAbilityId");

                    b.HasIndex("ChampionAbilitiesId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsAbilitiesAbility");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CounterChampionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CounterChapmionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<double>("WinRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionCounters");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte>("Attack")
                        .HasColumnType("tinyint");

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Defense")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Difficulty")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("Magic")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsInfo");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WinRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsItems");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionItemsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ChampionItemsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChampionItemsId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ItemId");

                    b.ToTable("ChampionsItemsItem");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionPassive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionPassives");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("BanRate")
                        .HasColumnType("float");

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("PickRate")
                        .HasColumnType("float");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Tier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<double>("WinRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsRoles");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRunes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MainRuneTree")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SecondaryRuneTree")
                        .HasColumnType("int");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<double>("WinRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsRunes");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRunesRune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ChampionRunesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RuneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionRunesId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RuneId");

                    b.ToTable("ChampionsRunesRune");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRunesStatRune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ChampionRunesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatRuneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionRunesId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StatRuneId");

                    b.ToTable("ChampionsRunesStatRune");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionStarterItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PickRate")
                        .HasColumnType("int");

                    b.Property<int>("WinRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionStarterItems");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionStarterItemsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ChampionStarterItemsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChampionStarterItemsId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ItemId");

                    b.ToTable("ChampionsStarterItemsItem");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Armor")
                        .HasColumnType("float");

                    b.Property<double>("ArmorPerLevel")
                        .HasColumnType("float");

                    b.Property<double>("AttackDamage")
                        .HasColumnType("float");

                    b.Property<double>("AttackDamagePerLevel")
                        .HasColumnType("float");

                    b.Property<double>("AttackRange")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeedOffset")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeedPerLevel")
                        .HasColumnType("float");

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Crit")
                        .HasColumnType("float");

                    b.Property<double>("CritPerLevel")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Hp")
                        .HasColumnType("float");

                    b.Property<double>("HpPerLevel")
                        .HasColumnType("float");

                    b.Property<double>("HpRegen")
                        .HasColumnType("float");

                    b.Property<double>("HpRegenPerLevel")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("MoveSpeed")
                        .HasColumnType("float");

                    b.Property<double>("Mp")
                        .HasColumnType("float");

                    b.Property<double>("MpPerLevel")
                        .HasColumnType("float");

                    b.Property<double>("MpRegen")
                        .HasColumnType("float");

                    b.Property<double>("MpRegenPerLevel")
                        .HasColumnType("float");

                    b.Property<double>("SpellBlock")
                        .HasColumnType("float");

                    b.Property<double>("SpellBlockPerLevel")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsStats");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionSummonerSpells", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("int");

                    b.Property<double>("WinRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionsSummonerSpell");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionSummonerSpellsSummonerSpell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ChampionSummonerSpellsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SummonerSpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionSummonerSpellsId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SummonerSpellId");

                    b.ToTable("ChampionsSummonerSpellsSummonerSpell");
                });

            modelBuilder.Entity("LoLStats.Data.Models.EnemyTip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChampionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChampionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("EnemyTips");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FullCost")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndividualCost")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPurchasable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellingCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Rune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeystone")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("RunePathId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RunePathId");

                    b.ToTable("Runes");
                });

            modelBuilder.Entity("LoLStats.Data.Models.RunePath", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("RunePaths");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("LoLStats.Data.Models.StatRune", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RowId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RuneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RowId");

                    b.ToTable("StatRunes");
                });

            modelBuilder.Entity("LoLStats.Data.Models.StatRuneRow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("StatRuneRows");
                });

            modelBuilder.Entity("LoLStats.Data.Models.SummonerSpell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("BaseCooldown")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tooltip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SummonerSpells");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChampionTags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BaseAbilityChampionAbilities", b =>
                {
                    b.HasOne("LoLStats.Data.Models.BaseAbility", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.ChampionAbilities", null)
                        .WithMany()
                        .HasForeignKey("ChampionAbilitiesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionItemsItem", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionItems", null)
                        .WithMany()
                        .HasForeignKey("ChampionItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionRunesRune", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionRunes", null)
                        .WithMany()
                        .HasForeignKey("ChampionRunesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Rune", null)
                        .WithMany()
                        .HasForeignKey("RunesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionRunesStatRune", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionRunes", null)
                        .WithMany()
                        .HasForeignKey("ChampionRunesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.StatRune", null)
                        .WithMany()
                        .HasForeignKey("StatRunesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionStarterItemsItem", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionStarterItems", null)
                        .WithMany()
                        .HasForeignKey("ChampionStarterItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionSummonerSpellsSummonerSpell", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionSummonerSpells", null)
                        .WithMany()
                        .HasForeignKey("ChampionSummonerSpellsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.SummonerSpell", null)
                        .WithMany()
                        .HasForeignKey("SummonerSpellsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampionTag", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", null)
                        .WithMany()
                        .HasForeignKey("ChampionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LoLStats.Data.Models.AbilityPerLevel", b =>
                {
                    b.HasOne("LoLStats.Data.Models.BaseAbility", "Ability")
                        .WithMany("PerLevelStats")
                        .HasForeignKey("AbilityId");

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("LoLStats.Data.Models.AllyTip", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("AllyTips")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.BaseAbility", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("BaseAbilities")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Champion", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionInfo", "Info")
                        .WithOne("Champion")
                        .HasForeignKey("LoLStats.Data.Models.Champion", "InfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.ChampionPassive", "Passive")
                        .WithOne("Champion")
                        .HasForeignKey("LoLStats.Data.Models.Champion", "PassiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.ChampionStats", "Stats")
                        .WithOne("Champion")
                        .HasForeignKey("LoLStats.Data.Models.Champion", "StatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Info");

                    b.Navigation("Passive");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionAbilities", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("BestAbilities")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionAbilitiesAbility", b =>
                {
                    b.HasOne("LoLStats.Data.Models.BaseAbility", "BaseAbility")
                        .WithMany()
                        .HasForeignKey("BaseAbilityId");

                    b.HasOne("LoLStats.Data.Models.ChampionAbilities", "ChampionAbilities")
                        .WithMany()
                        .HasForeignKey("ChampionAbilitiesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseAbility");

                    b.Navigation("ChampionAbilities");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionCounter", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("ChampionCounters")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionItems", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("BestItems")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionItemsItem", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionItems", "ChampionItems")
                        .WithMany()
                        .HasForeignKey("ChampionItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChampionItems");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRole", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("ChampionRoles")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRunes", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("BestRunes")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRunesRune", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionRunes", "ChampionRunes")
                        .WithMany()
                        .HasForeignKey("ChampionRunesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Rune", "Rune")
                        .WithMany()
                        .HasForeignKey("RuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChampionRunes");

                    b.Navigation("Rune");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionRunesStatRune", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionRunes", "ChampionRunes")
                        .WithMany()
                        .HasForeignKey("ChampionRunesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.StatRune", "StatRune")
                        .WithMany()
                        .HasForeignKey("StatRuneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChampionRunes");

                    b.Navigation("StatRune");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionStarterItems", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("BestStartingItems")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionStarterItemsItem", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionStarterItems", "ChampionStarterItems")
                        .WithMany()
                        .HasForeignKey("ChampionStarterItemsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChampionStarterItems");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionSummonerSpells", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("BestSummonerSpells")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionSummonerSpellsSummonerSpell", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ChampionSummonerSpells", "ChampionSummonerSpells")
                        .WithMany()
                        .HasForeignKey("ChampionSummonerSpellsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.SummonerSpell", "SummonerSpell")
                        .WithMany()
                        .HasForeignKey("SummonerSpellId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChampionSummonerSpells");

                    b.Navigation("SummonerSpell");
                });

            modelBuilder.Entity("LoLStats.Data.Models.EnemyTip", b =>
                {
                    b.HasOne("LoLStats.Data.Models.Champion", "Champion")
                        .WithMany("EnemyTips")
                        .HasForeignKey("ChampionId");

                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Rune", b =>
                {
                    b.HasOne("LoLStats.Data.Models.RunePath", "RunePath")
                        .WithMany("Runes")
                        .HasForeignKey("RunePathId");

                    b.Navigation("RunePath");
                });

            modelBuilder.Entity("LoLStats.Data.Models.StatRune", b =>
                {
                    b.HasOne("LoLStats.Data.Models.StatRuneRow", "Row")
                        .WithMany("Runes")
                        .HasForeignKey("RowId");

                    b.Navigation("Row");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoLStats.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LoLStats.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LoLStats.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("LoLStats.Data.Models.BaseAbility", b =>
                {
                    b.Navigation("PerLevelStats");
                });

            modelBuilder.Entity("LoLStats.Data.Models.Champion", b =>
                {
                    b.Navigation("AllyTips");

                    b.Navigation("BaseAbilities");

                    b.Navigation("BestAbilities");

                    b.Navigation("BestItems");

                    b.Navigation("BestRunes");

                    b.Navigation("BestStartingItems");

                    b.Navigation("BestSummonerSpells");

                    b.Navigation("ChampionCounters");

                    b.Navigation("ChampionRoles");

                    b.Navigation("EnemyTips");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionInfo", b =>
                {
                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionPassive", b =>
                {
                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.ChampionStats", b =>
                {
                    b.Navigation("Champion");
                });

            modelBuilder.Entity("LoLStats.Data.Models.RunePath", b =>
                {
                    b.Navigation("Runes");
                });

            modelBuilder.Entity("LoLStats.Data.Models.StatRuneRow", b =>
                {
                    b.Navigation("Runes");
                });
#pragma warning restore 612, 618
        }
    }
}
